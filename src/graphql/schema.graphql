schema {
  query:    RootQuery
  mutation: RootMutation
}

type RootQuery {
  me: Member!
  members: [Member!]!
  board(boardID: Int!): Board
  boards: [Board!]
  post(postID: Int!): Post
  postPage(boardID: Int!, page: Int, count: Int): PostPage
}

type RootMutation {
  createAccessToken(LoginInput: CreateAccessTokenInput!): AccessToken!
  createMember(MemberInput: CreateMemberInput!): Member!
  updateMember(MemberInput: UpdateMemberInput!): Member!
  deleteMember(memberUUID: String!): Member
  toggleMemberIsActivated(memberUUID: String!): Member
  toggleMemberIsAdmin(memberUUID: String!): Member

  createBoard(BoardInput: CreateBoardInput!): Board!
  updateBoard(boardID: Int!, BoardInput: UpdateBoardInput!): Board!
  deleteBoard(boardID: Int!): Board!

  createPost(boardID: Int!, PostInput: CreatePostInput!): Post! # TODO: add VoteInput!
  updatePost(postID: Int!, PostInput: UpdatePostInput!): Post!
  deletePost(postID: Int!): Post!
}


type AccessToken {
  key: String!
}

type Member {
  uuid:        String!
  loginID:     String!
  email:       String!
  phoneNumber: String!
  name:        String!
  department:  String!
  studentID:   String!
  isActivated: Boolean!
  isAdmin:     Boolean!
}

type Board {
  id:              Int!
  isSubscribed:    Boolean!
  name:            String!
  readPermission:  String!
  urlPath:         String!
  writePermission: String!
  postPage(before: Int, after: Int, count: Int): [Post!]
}

type Post {
  author:       Member!
  board:        Board!
  body:         String!
  comments:     [Comment!]
  createdAt:    String!
  id:           Int!
  isSubscribed: Boolean!
  title:        String!
  updatedAt:    String!
# vote:         Vote
}

type PostPage {
  items: [Post!]!
  pageInfo: PageInfo!
}

type Comment {
  author:    Member!
  body:      String!
  createdAt: String!
  id:        Int!
}

type PageInfo {
  currentPage: Int!
  totalPage: Int!
}


input CreateAccessTokenInput {
  loginID:  String!
  password: String!
}

input CreateMemberInput {
  loginID:     String!
  password:    String!
  email:       String!
  name:        String!
  phoneNumber: String!
  department:  String!
  studentID:   String!
}

input UpdateMemberInput {
  uuid:        String!
  password:    String
  email:       String
  name:        String
  phoneNumber: String
  department:  String
  studentID:   String
}

input CreateBoardInput {
  name:            String!
  urlPath:         String!
  readPermission:  String!
  writePermission: String!
}

input UpdateBoardInput {
  name:            String
  urlPath:         String
  readPermission:  String
  writePermission: String
}

input CreatePostInput {
  title: String!
  body:  String!
}

input UpdatePostInput {
  title: String
  body:  String
}
